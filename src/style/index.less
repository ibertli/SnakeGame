// 设置变量
@bg-color:#b7d4a8;

// 清楚默认样式
*{
    margin: 0;
    padding: 0;
    // 改变盒子模型的计算方式
    box-sizing: border-box;
}

body{
    // 将字体统一设置到这里
    font: bold 20px "Courier";
}

// 设置主窗口的样式
#main{
    width: 360px;
    height: 420px;
    // 设置背景颜色
    background-color: @bg-color;
    // 设置居中
    margin: 100px auto;
    border: 10px solid black;
    // 设置圆角
    border-radius: 40px;

    // 此时main主窗口中包含两个div，一个是stage,一个是score-panel，我们希望这两个div水平居中
    // 在main中开启弹性盒模型
    display: flex;
    //设置主轴方向，因为默认是水平排列的，而我们的两个盒子是竖直排列的
    flex-flow: column;
    //设置侧轴的对齐方式
    align-items: center;
    //设置主轴的对齐方式
    justify-content: space-around;


    // stage:游戏舞台
    #stage{
        width: 304px;
        height: 304px;
        border: 2px solid black;
        // 给舞台开启相对定位
        position: relative;

        // 设置蛇的样式
        #snake{
            &>div{
                width: 10px;
                height: 10px;
                background-color: #000;
                border: 1px solid @bg-color;
                // 蛇最终是要移动的，需要开启绝对定位
                position: absolute;
            }
        }

        // 设置食物
        &>#food{
            width: 10px;
            height: 10px;
            position: absolute;
            left: 40px;
            top: 100px;
            // 希望四个小的div分布在父元素的四个角，所以给父元素开启弹性盒模型
            display: flex;
            // 设置横轴为主轴，wrap表示会换行
            flex-flow: row wrap;
            // 设置主轴和侧轴的空白空间分配到元素之间between
            justify-content: space-between;
            align-content: space-between;

            &>div{
                width: 4px;
                height: 4px;
                background-color: black;
                // 使四个小的div旋转45°
                transform: rotate(45deg);
            }
        }
    }

    // score-panel 记分牌
    #score-panel{
        width: 300px;
        display: flex;
        justify-content: space-between;
    }
}